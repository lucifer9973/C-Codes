{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNhrEOYQVovxGj1psscF5Ll",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/lucifer9973/C-Codes/blob/main/AI%20starting\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "user_input = input(\"Enter elements: \")\n",
        "array = np.array([float(x) for x in user_input.split()])\n",
        "print(array)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mz83D9VCXuQQ",
        "outputId": "0d906e48-8ab0-41e1-895e-38d8293402da"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter elements: 2 2 0 5 3 1 9 4\n",
            "[2. 2. 0. 5. 3. 1. 9. 4.]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "arr = np.array([2,2,0,5,3,1,9,4])\n",
        "reversed_arr = arr[::-1]\n",
        "print(\"Original Array:\", arr)\n",
        "print(\"Reversed Array:\", reversed_arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "82Hk_k-vQ1Kp",
        "outputId": "cc59aefd-c1cd-42c3-bd47-ee45da1d2bcf"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Original Array: [2 2 0 5 3 1 9 4]\n",
            "Reversed Array: [4 9 1 3 5 0 2 2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y073UQ2QQmyg",
        "outputId": "cd8f0933-a2d3-4e61-e94d-f880166b3daa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the number of rows: 2\n",
            "Enter the number of columns: 2\n",
            "Enter the elements row by row, separated by spaces:\n",
            "Row 1: 23 3\n",
            "Row 2: 1 2\n",
            "Input Matrix:\n",
            "[[23.  3.]\n",
            " [ 1.  2.]]\n",
            "Maximum Value: 23.0\n",
            "Minimum Value: 1.0\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "def find_max_min(matrix):\n",
        "    max_value = np.max(matrix)\n",
        "    min_value = np.min(matrix)\n",
        "    return max_value, min_value\n",
        "rows = int(input(\"Enter the number of rows: \"))\n",
        "columns = int(input(\"Enter the number of columns: \"))\n",
        "print(\"Enter the elements row by row, separated by spaces:\")\n",
        "matrix = []\n",
        "for i in range(rows):\n",
        "    row = list(map(float, input(f\"Row {i+1}: \").split()))\n",
        "    if len(row) != columns:\n",
        "        print(\"Error: Please provide the correct number of elements for this row.\")\n",
        "        break\n",
        "    matrix.append(row)\n",
        "\n",
        "matrix = np.array(matrix)\n",
        "max_value, min_value = find_max_min(matrix)\n",
        "print(\"Input Matrix:\")\n",
        "print(matrix)\n",
        "print(\"Maximum Value:\", max_value)\n",
        "print(\"Minimum Value:\", min_value)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "rows = int(input(\"Enter the number of rows: \"))\n",
        "columns = int(input(\"Enter the number of columns: \"))\n",
        "print(\"Enter the elements row by row, separated by spaces:\")\n",
        "matrix = []\n",
        "for i in range(rows):\n",
        "    row = list(map(float, input(f\"Row {i+1}: \").split()))\n",
        "    if len(row) != columns:\n",
        "        print(\"Error: Please provide the correct number of elements for this row.\")\n",
        "        break\n",
        "    matrix.append(row)\n",
        "\n",
        "matrix = np.array(matrix)\n",
        "print(\"Input Matrix:\")\n",
        "print(matrix)\n",
        "rows, columns = matrix.shape\n",
        "print(\"Matrix:\")\n",
        "print(matrix)\n",
        "print(\"Number of rows:\", rows)\n",
        "print(\"Number of columns:\", columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KcNdwoa_SqjH",
        "outputId": "fac04287-5b09-4b77-df90-ee6350cdf0b5"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the number of rows: 2\n",
            "Enter the number of columns: 2\n",
            "Enter the elements row by row, separated by spaces:\n",
            "Row 1: 2 2\n",
            "Row 2: 0 5\n",
            "Input Matrix:\n",
            "[[2. 2.]\n",
            " [0. 5.]]\n",
            "Matrix:\n",
            "[[2. 2.]\n",
            " [0. 5.]]\n",
            "Number of rows: 2\n",
            "Number of columns: 2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "rows = int(input(\"Enter the number of rows: \"))\n",
        "columns = int(input(\"Enter the number of columns: \"))\n",
        "print(\"Enter the elements row by row, separated by spaces:\")\n",
        "matrix = []\n",
        "for i in range(rows):\n",
        "    row = list(map(float, input(f\"Row {i+1}: \").split()))\n",
        "    if len(row) != columns:\n",
        "        print(\"Error: Please provide the correct number of elements for this row.\")\n",
        "        break\n",
        "    matrix.append(row)\n",
        "\n",
        "matrix = np.array(matrix)\n",
        "sum_diagonal = np.trace(matrix)\n",
        "print(\"Matrix:\")\n",
        "print(matrix)\n",
        "print(\"Sum of diagonal elements:\", sum_diagonal)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TVcxKtYaUDGX",
        "outputId": "7f7d933b-884f-46e6-b8ab-35550f451a22"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter the number of rows: 2\n",
            "Enter the number of columns: 2\n",
            "Enter the elements row by row, separated by spaces:\n",
            "Row 1: 13 4\n",
            "Row 2: 4 5\n",
            "Matrix:\n",
            "[[13.  4.]\n",
            " [ 4.  5.]]\n",
            "Sum of diagonal elements: 18.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "def count_frequency(arr):\n",
        "    unique, counts = np.unique(arr, return_counts=True)\n",
        "    return dict(zip(unique, counts))\n",
        "user_input = input(\"Enter elements: \")\n",
        "array = np.array([float(x) for x in user_input.split()])\n",
        "frequency = count_frequency(array)\n",
        "print(\"Frequency of unique values:\")\n",
        "for value, count in frequency.items():\n",
        "    print(f\"Value: {value}, Frequency: {count}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NzjjSvklVXC_",
        "outputId": "82a1631e-d31f-48da-f207-202896636b8c"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter elements: 2 2 0 5 3 1 9 4\n",
            "Frequency of unique values:\n",
            "Value: 0.0, Frequency: 1\n",
            "Value: 1.0, Frequency: 1\n",
            "Value: 2.0, Frequency: 2\n",
            "Value: 3.0, Frequency: 1\n",
            "Value: 4.0, Frequency: 1\n",
            "Value: 5.0, Frequency: 1\n",
            "Value: 9.0, Frequency: 1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "A = np.array([[2, 2],\n",
        "              [0, 5]])\n",
        "B = np.array([[3, 1],\n",
        "              [9, 4]])-\n",
        "result = np.dot(A, B)\n",
        "print(\"Matrix A:\")\n",
        "print(A)\n",
        "print(\"Matrix B:\")\n",
        "print(B)\n",
        "print(\"Matrix multiplication result (A * B):\")\n",
        "print(result)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yBdjvILRXAsO",
        "outputId": "0388ab65-f7d5-429f-daca-b012869bfb67"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Matrix A:\n",
            "[[2 2]\n",
            " [0 5]]\n",
            "Matrix B:\n",
            "[[3 1]\n",
            " [9 4]]\n",
            "Matrix multiplication result (A * B):\n",
            "[[24 10]\n",
            " [45 20]]\n"
          ]
        }
      ]
    }
  ]
}